
mysql -uroot -p123456 -P3360

-- ********************************************************************
-- **********************  Examples les 07  ***************************
-- ******************  Администрирование MySQL  ***********************
-- ********************************************************************
-- *** ч.1 - Администрирование MySQL  ***
-- 01. Параметры запуска сервера
-- 02. Перезапуск сервера
-- 03. Конфигурационный файл
-- 04. Управление переменными сервера

-- * 01. Параметры запуска сервера *
-- Все параметры запуска необязательно указаывать в CMD при запуске 
-- MySQL, чтобы каждый раз не писать их при запсуке, параметры 
-- надо указать (в случае WIN) my.ini 
-- Касаемо Unix подобных ОС см. лекцию
--  
-- Если редактируется my.ini в этом случае необходимо перезапустить сервер (службу MySQL80)
-- в дисп. задач WIN 

-- 02. Перезапуск сервера
-- *
-- 03. Конфигурационный файл
-- *
-- 04. Управление переменными сервера
-- *



-- *** ч.2 - Администрирование MySQL  ***
-- 01. Журнальные файлы
-- 02. Управление журнальными файлами
-- 03. Ведение журналов в системной базе данных
-- 04. Соединения
-- 05. Команды SHOW PROCESSLIST и KILL


-- * 01. Журнальные файлы
Журанл ошибок - Содержит все ERRORs 
Общий журнал запросов - рег-ет все выпоняемые запросы. 
	Только это журнал явл. не текстовым, для его просмтора необходима утилита mysqlbinlog
Бинарный журнал - рег-ет все команды которые приводят к изменению данных. Использ-ся для репликаций и восстановления данных.
Журнал медленных запросов - заносятся все запросы которые превысили время выполнения, которое указано в сист.пер. long_query_time

-- Получение журнала ошибок
SHOW VARIABLES LIKE 'log_error';

-- Общий журнал запросов
SHOW VARIABLES LIKE 'general_log%';
-- По умолчанию этот журнал откл.
Чтобы его вкл. необходимо в конфиге сервера 
в разделе [mysqld] указать дериктиву :
general_log = ON
-- ПОСЛЕ ИЗМЕНЕНИЯ КОНФИГА СЕРВЕР НАДО ПЕРЕЗАГРУЗИТЬ

-- Журнал медленных запросов
-- По умолчанию этот журнал откл.
-- также вкл через конфиг
-- в разделе [mysqld]:
slow_query_log = ON
-- Проверить:
SHOW VARIABLES LIKE 'slow_query_log%';

-- Организуем медленный запрос 
-- ....

-- см. лекцию


-- *** ч.3 - Права пользователей  ***
-- 01. Создание и удаление пользователей
-- 02. Учетная запись
-- 03. Команды GRANT и REVOKE
-- 04. Ограничения учетной записи по потребляемым ресурсам

!!!! ПЕРЕПИСАТЬ ИЗ ВКБИНАРНОГО КУРСА !!!!


-- MySQL - это многопользовательская среда с разным уровнем привелегий

-- * 01. Создание и удаление пользователей
CREATE USER foo;
-- если pas не указан в этом случае pas пустая строка
-- Для создания Usera с паролем
CREATE USER shop IDENTIFIED WITH sha256_password BY 'pass';
exit;

-- теперь мы под новым пользователем
mysql -ushop -p -P3360
-- текущий юзер
SELECT USER();
-- список всех пользователей
SELECT Host, User FROM mysql.user;-- Для текущ. польз. не достаточ. прав
-- Пользователи созданные при помощи CREATE USER не обладают никакими правами
-- с использ. такой записи невозможно осущ. просмотр табл. и запросы
-- Для наделения привелегиями см. дальше GRANT

-- удаление юзера
DROP USER foo;
-- !!! Оператор DROP USER() не закрывает автомат. соединение удаленного 
-- пользов. если оно еще актив. на текущ. момент, до того момента пока 
-- соединение не будет разорвано !!!


-- * 02. Учетная запись
-- Изменить имя уже сущ.-ей уч.записи
RENAME USER shop TO foo;
-- У каждого юзера помимо имени имеется атрибут Host,
-- имя пользователя явл. составным, после @ следует Host
-- с которого пользователю разрешено обрашаться к серверу mysql

-- данная команда разрешит пользователям обращаться к серверу с 
-- любых алресов сети
user@%

-- Команды выше позваляют: создавать, удалять, редактировать.
-- Однако они не позвол. изменять привелегии пользователей
-- Эти проблемы решают Команды GRANT и REVOKE

+
-- * 03. Команды GRANT и REVOKE
-- GRANT - назначает привелегии пользователю
-- REVOKE - удаляет привелегии пользователю

-- Создадим пользователя с именем и паролем 
-- + этот пользователь может обращаться к серверу с локального хоста
-- и имеет все права для всех БД
GRANT ALL ON *.* TO 'foo'@'localhost' IDENTIFIED WITH sha256_password BY 'pass';

-- Отобрать права
REVOKE ALL ON *.* TO 'foo'@'localhost';

-- Сущ-ет больше кол-во разл. привелегий, см. в сети
-- поработаем с привелегиями в консоли
GRANT SELECT, INSERT, DELETE, UPDATE ON *.* TO foo;

-- Чтобы назначить все привелегии польностью
-- ALL разрешает все операции кроме назначения прав себе
-- и другим пользователям, за назначение прав отвечает GRANT OPTION
GRANT ALL ON *.* TO foo;
-- +
GRANT GRANT OPTION ON *.* TO foo;
-- в одном запросе это не пройдет, ALL всегда употребляется отдельно !!!

-- Для ALL есть полная противоположность
-- USAGE - полное отсутствие привелегий,
-- его можно использ. с другими привелегиями
GRANT USAGE, SELECT ON *.* TO foo;

-- кл.слово ON задает уровень привелегий
GRANT USAGE ON *.* TO foo; -- Глобальный уровень, касется всех БД, можно все

GRANT USAGE ON * TO foo; -- 1 звездочка '*', ВАЖНО !
-- если данная команда была выполнена вне рамках какой либо БД
-- то она равносильна *.*, иначе 'все прив-гии' только в той БД
-- в которой был выполнен запрос

GRANT USAGE ON shop.* TO foo; -- Явно указываем область действия 
-- привелегий, только в рамках указанной БД

GRANT USAGE ON shop.catalogs TO foo; -- Права на конкретную табл.

-- можно даже указать права доступа на отдельные столбцы
GRANT SELECT(id, name), UPDATE(name) ON shop.catalogs TO foo;

-- Просмотр текущих привелегий
SHOW GRANTS;


-- кл.слово WITH оператора GRANT позволяет наложить ограничение
-- на привелегииЮ напр. на кол-во подключений, запросов, обновлений и
-- паралл. подключ. в час.

-- Создадим пользователя с огрничениями
GRANT ALL ON shop.* TO 'foo'@'localhost' IDENTIFIED WITH sha256_password BY 'pass'
WITH MAX_CONNECTIONS_PER_HOUR 10 -- не более 10 подключений к серверу в час
	 MAX_QUERIES_PER_HOUR 1000 -- не более 1000 запросов
	 MAX_UPDATES_PER_HOUR 200 -- из которых только 200 UPDATE в час
	 MAX_USER_CONNECTIONS 3; -- и макс 3 запроса одновременно

-- Если какая-либо содержит 0, это значит, что ограничения нет по данной опции.




-- *** ч.3 - Репликация  ***
-- см. лекцию.

